<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive HTGAA Circle Typography</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            font-family: 'Helvetica Neue', Arial, sans-serif;
            min-height: 100vh;
        }

        .container {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        .controls {
            width: 100%;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            padding: 20px 40px 0 40px;
            box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
            overflow-x: auto;
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            display: flex;
            flex-wrap: wrap;
            flex: 1fr 1fr 1fr 1fr 1fr 1fr;
            gap: 30px;
            align-items: flex-start;
            justify-content: flex-start;
        }

        .canvas-container {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0px;
            border-radius: 15px;
        }

        .control-group {
            max-width: 250px;
            min-width: 13.5vw;
            margin-bottom: 0;
            padding-bottom: 0;
            border-bottom: none;
        }

        .control-group h3 {
            color: #333;
            margin-bottom: 15px;
            font-size: 16px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .title {
            width: 100%;
            text-align: left;
            margin-bottom: 10px;
            color: #333;
            font-size: 24px;
            font-weight: 700;
            flex-basis: 100%;
        }

        .control-item {
            margin-bottom: 15px;
        }

        .control-item label {
            display: block;
            margin-bottom: 8px;
            color: #555;
            font-size: 14px;
            font-weight: 500;
        }

        .control-item input[type="range"] {
            width: 100%;
            height: 6px;
            border-radius: 3px;
            background: #ddd;
            outline: none;
            margin-bottom: 5px;
        }

        .control-item input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            cursor: pointer;
            box-shadow: 0 2px 10px rgba(102, 126, 234, 0.3);
        }

        .control-item input[type="range"]::-moz-range-thumb {
            width: 18px;
            height: 18px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            cursor: pointer;
            border: none;
            box-shadow: 0 2px 10px rgba(102, 126, 234, 0.3);
        }

        .value-display {
            display: inline-block;
            background: #f8f9fa;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            color: #666;
            min-width: 40px;
            text-align: center;
        }

        .color-input {
            width: 100%;
            height: 40px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .button {
            width: 100%;
            padding: 12px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
            margin-bottom: 10px;
        }

        .button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .button:active {
            transform: translateY(0);
        }

        .canvas-wrapper {
            background: white;
            padding: 0px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(10px);
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="controls">
            <div class="title">Controls</div>

            <div class="control-group">
                <h3>Animation</h3>
                <div class="control-item">
                    <label>Random Seed <span class="value-display" id="seedValue">0</span></label>
                    <input type="range" id="randomSeed" min="0" max="100000" value="0" step="1">
                </div>
                <button class="button" onclick="newRandomSeed()">New Random Seed</button>
            </div>

            <div class="control-group">
                <h3>Position Variation</h3>
                <div class="control-item">
                    <label>X Shift Amount <span class="value-display" id="shiftXValue">20</span></label>
                    <input type="range" id="shiftX" min="0" max="1000" value="20" step="1">
                </div>
                <div class="control-item">
                    <label>Y Shift Amount <span class="value-display" id="shiftYValue">20</span></label>
                    <input type="range" id="shiftY" min="0" max="1000" value="20" step="1">
                </div>
            </div>

            <div class="control-group">
                <h3>Circle Properties</h3>
                <div class="control-item">
                    <label>Circle Size <span class="value-display" id="circleSizeValue">15</span></label>
                    <input type="range" id="circleSize" min="1" max="50" value="15" step="0.5">
                </div>
                <div class="control-item">
                    <label>Stroke Weight <span class="value-display" id="strokeWeightValue">2</span></label>
                    <input type="range" id="strokeWeight" min="0.1" max="10" value="2" step="0.1">
                </div>
                <div class="control-item">
                    <label>Circle Alpha <span class="value-display" id="circleAlphaValue">130</span></label>
                    <input type="range" id="circleAlpha" min="10" max="255" value="130" step="1">
                </div>
            </div>

            <div class="control-group">
                <h3>Colors</h3>
                <div class="control-item">
                    <label>Circle Color</label>
                    <input type="color" id="circleColorPicker" value="#000000" class="color-input">
                </div>
                <div class="control-item">
                    <label>Background Color</label>
                    <input type="color" id="backgroundColorPicker" value="#ffffff" class="color-input">
                </div>
            </div>

            <div class="control-group">
                <h3>Typography</h3>
                <div class="control-item">
                    <label>Point Spacing <span class="value-display" id="pointSpacingValue">8</span></label>
                    <input type="range" id="pointSpacing" min="2" max="20" value="8" step="1">
                </div>
                <div class="control-item">
                    <label>Letter Width <span class="value-display" id="letterWidthValue">120</span></label>
                    <input type="range" id="letterWidth" min="50" max="500" value="260" step="5">
                </div>
                <div class="control-item">
                    <label>Letter Height <span class="value-display" id="letterHeightValue">150</span></label>
                    <input type="range" id="letterHeight" min="80" max="500" value="290" step="5">
                </div>
                <div class="control-item">
                    <label>Letter Spacing <span class="value-display" id="letterSpacingValue">10</span></label>
                    <input type="range" id="letterSpacing" min="0" max="50" value="15" step="1">
                </div>
            </div>

            <div class="control-group">
                <button class="button" onclick="saveImage()">Save Image</button>
                <button class="button" onclick="resetToDefaults()">Reset Defaults</button>
            </div>
        </div>

        <div class="canvas-container">
            <div class="canvas-wrapper">
                <div id="p5-container"></div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        var actRandomSeed = 0;
        var circleAlpha = 130;
        var circleColor;
        var backgroundColor;
        var letterPoints = [];
        var controls = {};

        // Control values
        var shiftXAmount = 20;
        var shiftYAmount = 20;
        var circleSize = 15;
        var strokeWeightValue = 2;
        var pointSpacing = 8;
        var letterWidth = 260;
        var letterHeight = 290;
        var letterSpacing = 15;
        var circleColorHex = '#000000';
        var backgroundColorHex = '#ffffff';

        function setup() {
            var canvas = createCanvas(windowWidth-50, windowHeight/2);
            canvas.parent('p5-container');
            noFill();

            // Initialize colors
            updateColors();

            // Initialize controls
            initializeControls();

            // Generate initial letter points
            generateLetterPoints();
        }

        function initializeControls() {
            // Get all control elements
            controls.randomSeed = document.getElementById('randomSeed');
            controls.shiftX = document.getElementById('shiftX');
            controls.shiftY = document.getElementById('shiftY');
            controls.circleSize = document.getElementById('circleSize');
            controls.strokeWeight = document.getElementById('strokeWeight');
            controls.circleAlpha = document.getElementById('circleAlpha');
            controls.pointSpacing = document.getElementById('pointSpacing');
            controls.letterWidth = document.getElementById('letterWidth');
            controls.letterHeight = document.getElementById('letterHeight');
            controls.letterSpacing = document.getElementById('letterSpacing');
            controls.circleColorPicker = document.getElementById('circleColorPicker');
            controls.backgroundColorPicker = document.getElementById('backgroundColorPicker');

            // Add event listeners
            Object.keys(controls).forEach(key => {
                if (controls[key]) {
                    controls[key].addEventListener('input', updateFromControls);
                }
            });

            // Update displays
            updateAllDisplays();
        }

        function updateFromControls() {
            actRandomSeed = parseInt(controls.randomSeed.value);
            shiftXAmount = parseInt(controls.shiftX.value);
            shiftYAmount = parseInt(controls.shiftY.value);
            circleSize = parseFloat(controls.circleSize.value);
            strokeWeightValue = parseFloat(controls.strokeWeight.value);
            circleAlpha = parseInt(controls.circleAlpha.value);
            pointSpacing = parseInt(controls.pointSpacing.value);
            letterWidth = parseInt(controls.letterWidth.value);
            letterHeight = parseInt(controls.letterHeight.value);
            letterSpacing = parseInt(controls.letterSpacing.value);
            circleColorHex = controls.circleColorPicker.value;
            backgroundColorHex = controls.backgroundColorPicker.value;

            updateColors();
            generateLetterPoints();
            updateAllDisplays();
        }

        function updateColors() {
            var r = parseInt(circleColorHex.slice(1, 3), 16);
            var g = parseInt(circleColorHex.slice(3, 5), 16);
            var b = parseInt(circleColorHex.slice(5, 7), 16);
            circleColor = color(r, g, b, circleAlpha);

            var bgR = parseInt(backgroundColorHex.slice(1, 3), 16);
            var bgG = parseInt(backgroundColorHex.slice(3, 5), 16);
            var bgB = parseInt(backgroundColorHex.slice(5, 7), 16);
            backgroundColor = color(bgR, bgG, bgB);
        }

        function updateAllDisplays() {
            document.getElementById('seedValue').textContent = actRandomSeed;
            document.getElementById('shiftXValue').textContent = shiftXAmount;
            document.getElementById('shiftYValue').textContent = shiftYAmount;
            document.getElementById('circleSizeValue').textContent = circleSize;
            document.getElementById('strokeWeightValue').textContent = strokeWeightValue;
            document.getElementById('circleAlphaValue').textContent = circleAlpha;
            document.getElementById('pointSpacingValue').textContent = pointSpacing;
            document.getElementById('letterWidthValue').textContent = letterWidth;
            document.getElementById('letterHeightValue').textContent = letterHeight;
            document.getElementById('letterSpacingValue').textContent = letterSpacing;
        }

        function generateLetterPoints() {
            letterPoints = [];
            var startX = 60;
            var startY = 50;

            var htExtraSpacing = 20; // extra gap between H and T

           
    // H
    addLetterH(startX, startY, letterWidth, letterHeight);

    // T (H width + regular spacing + extra spacing)
    var tX = startX + letterWidth + letterSpacing + htExtraSpacing;
    addLetterT(tX, startY, letterWidth, letterHeight);

    // G (T width + regular spacing, no extra)
    var gX = tX + letterWidth + letterSpacing;
    addLetterG(gX, startY, letterWidth, letterHeight);

    // A
    var a1X = gX + letterWidth + letterSpacing;
    addLetterA(a1X, startY, letterWidth, letterHeight);

    // A
    var a2X = a1X + letterWidth + letterSpacing;
    addLetterA(a2X, startY, letterWidth, letterHeight);
        }

        function addLetterH(x, y, w, h) {
            // Left vertical line
            for (var i = 0; i <= h; i += pointSpacing) {
                letterPoints.push({ x: x, y: y + i });
            }

            // Right vertical line
            for (var i = 0; i <= h; i += pointSpacing) {
                letterPoints.push({ x: x + w, y: y + i });
            }

            // Horizontal middle line
            for (var i = 0; i <= w; i += pointSpacing) {
                letterPoints.push({ x: x + i, y: y + h / 2 });
            }
        }

        function addLetterT(x, y, w, h) {
            // Top horizontal line
            for (var i = 0; i <= w; i += pointSpacing) {
                letterPoints.push({ x: x + i, y: y });
            }

            // Vertical center line
            for (var i = 0; i <= h; i += pointSpacing) {
                letterPoints.push({ x: x + w / 2, y: y + i });
            }
        }

        function addLetterG(x, y, w, h) {
            let radiusX = w / 2;
            let radiusY = h / 2;
            let centerX = x + radiusX;
            let centerY = y + radiusY;

            // Approximate perimeter of ellipse (Ramanujan)
            let perimeter = Math.PI * (3 * (radiusX + radiusY) - Math.sqrt((3 * radiusX + radiusY) * (radiusX + 3 * radiusY)));

            // How many points along the whole ellipse?
            let totalPoints = Math.floor(perimeter / pointSpacing);

            // Function to add arc section with pointSpacing
            function addArc(startAngle, endAngle, conditionFn) {
                let arcLength = (endAngle - startAngle) / TWO_PI * perimeter;
                let steps = Math.max(2, Math.floor(arcLength / pointSpacing));
                for (let i = 0; i <= steps; i++) {
                    let t = i / steps;
                    let angle = lerp(startAngle, endAngle, t);
                    let px = centerX + cos(angle) * radiusX;
                    let py = centerY + sin(angle) * radiusY;
                    if (!conditionFn || conditionFn(px, py)) {
                        letterPoints.push({ x: px, y: py });
                    }
                }
            }

            // Left arc (bottom → top)
            addArc(PI / 2, PI + PI / 2);

            // Top arc (left → right), clipped to 3/4 width
            addArc(PI + PI / 2, TWO_PI, (px, py) => px <= x + w * 0.75);

            // Horizontal line (middle right)
            for (let i = 0; i <= w / 2; i += pointSpacing) {
                letterPoints.push({ x: x + w / 2 + i, y: y + h / 2 });
            }

            // Bottom arc (right → bottom)
            addArc(0, PI / 2);
        }

        function addLetterA(x, y, w, h) {
            var peakX = x + w / 2;
            var peakY = y;

            // Left diagonal
            var leftPoints = Math.floor(h / pointSpacing);
            for (var i = 0; i <= leftPoints; i++) {
                var t = i / leftPoints;
                var px = lerp(peakX, x, t);
                var py = lerp(peakY, y + h, t);
                letterPoints.push({ x: px, y: py });
            }

            // Right diagonal
            for (var i = 0; i <= leftPoints; i++) {
                var t = i / leftPoints;
                var px = lerp(peakX, x + w, t);
                var py = lerp(peakY, y + h, t);
                letterPoints.push({ x: px, y: py });
            }

            // Horizontal crossbar
            var crossY = y + h * 0.6;
            var crossLeft = x + w * 0.25;
            var crossRight = x + w * 0.75;
            for (var i = 0; i <= (crossRight - crossLeft); i += pointSpacing) {
                letterPoints.push({ x: crossLeft + i, y: crossY });
            }
        }

        function draw() {
            background(backgroundColor);
            randomSeed(actRandomSeed);
            stroke(circleColor);
            strokeWeight(strokeWeightValue);

            for (var i = 0; i < letterPoints.length; i++) {
                var point = letterPoints[i];
                var shiftX = random(-shiftXAmount, shiftXAmount) / 20;
                var shiftY = random(-shiftYAmount, shiftYAmount) / 20;

                ellipse(point.x + shiftX, point.y + shiftY, circleSize, circleSize);
            }
        }

        // Control functions
        function newRandomSeed() {
            var newSeed = Math.floor(Math.random() * 100000);
            controls.randomSeed.value = newSeed;
            updateFromControls();
        }

        function saveImage() {
            saveCanvas('htgaa_interactive_' + Date.now(), 'png');
        }

        function resetToDefaults() {
            controls.randomSeed.value = 0;
            controls.shiftX.value = 20;
            controls.shiftY.value = 20;
            controls.circleSize.value = 15;
            controls.strokeWeight.value = 2;
            controls.circleAlpha.value = 130;
            controls.pointSpacing.value = 8;
            controls.letterWidth.value = 120;
            controls.letterHeight.value = 150;
            controls.letterSpacing.value = 10;
            controls.circleColorPicker.value = '#000000';
            controls.backgroundColorPicker.value = '#ffffff';
            updateFromControls();
        }
    </script>
</body>

</html>
